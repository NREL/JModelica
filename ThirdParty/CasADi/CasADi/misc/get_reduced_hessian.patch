Index: Ipopt/contrib/sIPOPT/src/SensApplication.cpp
===================================================================
--- Ipopt/contrib/sIPOPT/src/SensApplication.cpp	(revision 2114)
+++ Ipopt/contrib/sIPOPT/src/SensApplication.cpp	(working copy)
@@ -173,6 +173,7 @@
 											 *pd_solver_);
 
       red_hess_calc->ComputeReducedHessian();
+      red_hess_ = red_hess_calc->ReducedHessian();
     }
 
     if (run_sens_ && n_sens_steps_>0 && !sens_internal_abort) {
Index: Ipopt/contrib/sIPOPT/src/SensSchurDriver.hpp
===================================================================
--- Ipopt/contrib/sIPOPT/src/SensApplication.hpp	(revision 2114)
+++ Ipopt/contrib/sIPOPT/src/SensApplication.hpp	(working copy)
@@ -14,6 +14,9 @@
 
 #include "IpIpoptApplication.hpp"
 #include "IpPDSystemSolver.hpp"
+
+#define WITH_CASADI_PATCH
+
 namespace Ipopt
 {
   /** Standard exception for wrong/inconsistent suffixes for sipopt */
@@ -55,7 +58,13 @@
       return ConstPtr(options_);
     }
 
+    /** Get the calculated reduced Hessian */
+    const std::vector<double>& ReducedHessian() const
+    {
+      return red_hess_;
+    }
 
+
   private:
 
     // standard constructor just so it can't be used
@@ -75,6 +84,9 @@
     bool run_sens_;
     bool compute_red_hessian_;
     Index n_sens_steps_;
+    
+    /** Pointer to calulated reduced Hessian */
+    std::vector<double> red_hess_;
   };
 }
 
Index: Ipopt/contrib/sIPOPT/src/SensReducedHessianCalculator.cpp
===================================================================
--- Ipopt/contrib/sIPOPT/src/SensReducedHessianCalculator.cpp	(revision 2114)
+++ Ipopt/contrib/sIPOPT/src/SensReducedHessianCalculator.cpp	(working copy)
@@ -89,6 +89,12 @@
     }
 
     S->Print(Jnlst(),J_INSUPPRESSIBLE,J_USER1,"RedHessian unscaled");
+    
+    // Save the calculated reduced Hessian
+    red_hess_.resize((S->NCols())*(S->NRows()));
+    for (Index k=0; k<red_hess_.size(); ++k) {
+      red_hess_[k] = s_val[k];
+    }   
 
     if ( compute_eigenvalues_ ) {
       SmartPtr<DenseGenMatrixSpace> eigenvectorspace = new DenseGenMatrixSpace(dim_S, dim_S);
Index: Ipopt/contrib/sIPOPT/src/SensReducedHessianCalculator.hpp
===================================================================
--- Ipopt/contrib/sIPOPT/src/SensReducedHessianCalculator.hpp	(revision 2114)
+++ Ipopt/contrib/sIPOPT/src/SensReducedHessianCalculator.hpp	(working copy)
@@ -30,6 +30,12 @@
     /* This function computes the unscaled reduced hessian matrix */
     virtual bool ComputeReducedHessian();
 
+    /** Get the calculated reduced Hessian */
+    const std::vector<double>& ReducedHessian() const
+    {
+      return red_hess_;
+    }
+    
   private:
 
     /** Pointer to Schurdata object holding the indices for selecting the free variables */
@@ -40,6 +46,9 @@
 
     /** True, if option rh_eigendecomp was set to yes */
     bool compute_eigenvalues_;
+    
+    /** Pointer to calulated reduced Hessian */
+    std::vector<double> red_hess_;
   };
 
 }
