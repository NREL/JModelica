/*
 *    This file is part of CasADi.
 *
 *    CasADi -- A symbolic framework for dynamic optimization.
 *    Copyright (C) 2010-2014 Joel Andersson, Joris Gillis, Moritz Diehl,
 *                            K.U. Leuven. All rights reserved.
 *    Copyright (C) 2011-2014 Greg Horn
 *
 *    CasADi is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    CasADi is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with CasADi; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */


#ifndef CASADI_QP_SOLVER_HPP
#define CASADI_QP_SOLVER_HPP

#include "function.hpp"

//#include "../autogenerated.hpp"


/** \defgroup QpSolver_doc

  Solves the following strictly convex problem:

  \verbatim
  min          1/2 x' H x + g' x
   x

  subject to
              LBA <= A x <= UBA
              LBX <= x   <= UBX

      with :
        H sparse (n x n) positive definite
        g dense  (n x 1)

      n: number of decision variables (x)
      nc: number of constraints (A)

  \endverbatim

  If H is not positive-definite, the solver should throw an error.

*/

namespace casadi {

  /// Input arguments of a QP problem [qpIn]
  enum QpSolverInput {
    /// The square matrix H: sparse, (n x n). Only the lower triangular part is actually used.
    /// The matrix is assumed to be symmetrical. [h]
    QP_SOLVER_H,
    /// The vector g: dense,  (n x 1) [g]
    QP_SOLVER_G,
    /// The matrix A: sparse, (nc x n) - product with x must be dense. [a]
    QP_SOLVER_A,
    /// dense, (nc x 1) [lba]
    QP_SOLVER_LBA,
    /// dense, (nc x 1) [uba]
    QP_SOLVER_UBA,
    /// dense, (n x 1) [lbx]
    QP_SOLVER_LBX,
    /// dense, (n x 1) [ubx]
    QP_SOLVER_UBX,
    /// dense, (n x 1) [x0]
    QP_SOLVER_X0,
    /// dense [lam_x0]
    QP_SOLVER_LAM_X0,
    QP_SOLVER_NUM_IN};

  /// Output arguments of an QP Solver [qpOut]
  enum QpSolverOutput {
    /// The primal solution [x]
    QP_SOLVER_X,
    /// The optimal cost [cost]
    QP_SOLVER_COST,
    /// The dual solution corresponding to linear bounds [lam_a]
    QP_SOLVER_LAM_A,
    /// The dual solution corresponding to simple bounds [lam_x]
    QP_SOLVER_LAM_X,
    QP_SOLVER_NUM_OUT};


  /// Structure specification of a QP [qpStruct]
  enum QPStruct {
    /// The square matrix H: sparse, (n x n). Only the lower triangular part is actually used.
    /// The matrix is assumed to be symmetrical. [h]
    QP_STRUCT_H,
    /// The matrix A: sparse, (nc x n) - product with x must be dense. [a]
    QP_STRUCT_A,
    QP_STRUCT_NUM};

  // Forward declaration of internal class
  class QpSolverInternal;

  /** \brief QpSolver


      @copydoc QpSolver_doc

      \generalsection{QpSolver}
      \pluginssection{QpSolver}

      \author Joel Andersson
      \date 2010
  */
  class CASADI_CORE_EXPORT QpSolver : public Function {
  public:

    /// Default constructor
    QpSolver();

    /** \brief Constructor
     *  \param name \pluginargument{QpSolver}
     *  \param st \structargument{QP}
     */
    QpSolver(const std::string& name, const QPStructure& st);

    /// Access functions of the node
    QpSolverInternal* operator->();
    const QpSolverInternal* operator->() const;

    /// Check if a particular cast is allowed
    static bool testCast(const SharedObjectNode* ptr);

    /// Check if a plugin is available
    static bool hasPlugin(const std::string& name);

    /// Explicitly load a plugin dynamically
    static void loadPlugin(const std::string& name);

    /// Get solver specific documentation
    static std::string doc(const std::string& name);

    /// Set options that make the QP solver more suitable for solving LPs
    void setLPOptions();

    /** Generate native code in the interfaced language for debugging */
    void generateNativeCode(const std::string &filename) const;

    /** Generate native code in the interfaced language for debugging */
    void generateNativeCode(std::ostream &file) const;
  };

} // namespace casadi

#endif // CASADI_QP_SOLVER_HPP
