--- /home/jg/programs/swig-1.3.40/Lib/octave/octrun.swg	2009-08-15 03:19:28.000000000 +0200
+++ /usr/share/swig1.3/octave/octrun.swg	2011-07-07 15:49:11.014373272 +0200
@@ -701,6 +701,53 @@
       return as_value();
     }
 
+    virtual dim_vector dims (void) const {
+      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
+      
+      // Find the __dims__ method of this object
+      member_value_pair *m = nc_this->find_member("__dims__", false);
+      if (!m) {
+	      error("__dims__ method not defined for swig_type");
+	      return dim_vector();
+      }
+      
+      // Call the __dims__ method of this object
+      octave_value_list inarg;
+      inarg.append(nc_this->as_value());
+      octave_value_list outarg = nc_this->member_invoke(m, inarg, 1);
+      if (outarg.length() < 1) {
+	      error("__dims__ method did not return a Cell");
+	      return dim_vector();
+      }
+      
+      if (!outarg(0).is_cell()) {
+	      error("__dims__ method did not return a Cell");
+	      return dim_vector();
+      }
+      
+      const Cell & c=outarg(0).cell_value();
+      int ndim = c.rows();
+   
+      dim_vector d;
+      d.resize(ndim);
+        
+      // Fill in dim_vector 
+      for (int k=0;k<ndim;k++) {
+        const octave_value& obj = c(k,0);
+        d.elem(k) = obj.int_value();
+        
+        if (error_state) {
+          error("Cell was not filled with ints");
+          return dim_vector();
+        } 
+     }
+     return d;
+    
+    }
+    
+    // The following method is needed to get concatenation working
+    virtual bool is_object() const { return true; } 
+      
     virtual bool is_string() const {
       octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
       return !!nc_this->find_member("__str__", false);
@@ -926,6 +973,11 @@
     virtual bool is_string() const 
       { return ptr->is_string(); }
 
+    virtual bool is_object() const { return ptr->is_object(); }
+      
+    // The following methods are needed to get size/columns/rows working
+    virtual dim_vector dims (void) const { return ptr->dims(); }
+
     virtual std::string string_value(bool force = false) const 
       { return ptr->string_value(force); }
 
